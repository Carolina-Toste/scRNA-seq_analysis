---
title: "Merge batches"
# if you only have a single chip, set eval to false here so this code isn't run
execute: 
  eval: true
---

```{r}
#| label: source packages needed
# load packages needed
source(here::here("scripts/setup.R"))
```

-   Experimental design will often require things to be run in batches due to logistics, so you have to consider how the data is put together to avoid obscuring real biological differences.
-   Multiple methods compared by [Tran 2020](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-019-1850-9), [Harmony](https://portals.broadinstitute.org/harmony/articles/quickstart.html) came out highly rated but fastMNN also performed well.
-   For an exhaustive list of QC methods check out the [OSCA book](https://bioconductor.org/books/release/OSCA/)

## Pre-Integration preparation

-   First steps within "batch" (per sample, per run depending on experiment/data) you should normalise, model variance (deconvolution), dimensionality reduction and possibly clustering before integration.

-   Formatting needs to be considered before integration;

    -   Consider how the data is arranged e.g. One sce with many samples or single sample sce's QC'd in isolation.
    -   Ensure everything has been processed on **same** bioconductor versions.

## Multiple (\>2) Chips

```{r}
#| label: load data
# load data
sce <- readRDS(here("results/DimRed.rds"))
```

-   Will now run `quickCorrect` function on this combined sce object and show t-SNE and UMAP plots of the resulting "corrected" data.

```{r}
#| label: quick-correct-all
#check by chip
quick_corrected <- quickCorrect(sce, batch = sce$chip) 
quick_all_sce <- quick_corrected$corrected

set.seed(123)
quick_all_sce <- runTSNE(quick_all_sce, dimred="corrected")
quick_all_sce$batch <- factor(quick_all_sce$batch)
plotTSNE(quick_all_sce, colour_by="batch")

set.seed(123)
quick_all_sce <- runUMAP(quick_all_sce, dimred="corrected")
quick_all_sce$chip <- factor(quick_all_sce$batch)
plotUMAP(quick_all_sce, colour_by= "batch")


#check by sample
quick_corrected_test <- quickCorrect (sce, batch = sce$Sample) 
quick_all_sce_test <- quick_corrected_test$corrected

set.seed(123)
quick_all_sce_test<- runTSNE(quick_all_sce_test, dimred="corrected")
quick_all_sce_test$batch <- factor(quick_all_sce_test$batch)
plotTSNE(quick_all_sce_test, colour_by="batch")

set.seed(123)
quick_all_sce_test <- runUMAP(quick_all_sce_test, dimred="corrected")
quick_all_sce$batch <- factor(quick_all_sce_test$batch)
plotUMAP(quick_all_sce_test, colour_by= "batch")
```

-   Reintroduce metadata from the merged sce as this is lost in batch correction.

    -   Saves data as `corr_sce_all.rds`

```{r}
#| label: include-metadata

# left join rowdata from sce
rowmeta <- rowData(sce) %>%
  as.data.frame()
# note that converting to df seems to inflate the colnumber, not sure why...
row_quick <- as.data.frame(rowData(quick_all_sce)) %>%
  rownames_to_column("Gene_Name") %>%
  dplyr::left_join(rowmeta, by = join_by(Gene_Name)) %>%
  DataFrame()

# get coldata
meta <- colData(sce) %>%
  as.data.frame() %>%
  DataFrame()

rowData(quick_all_sce) <- row_quick
colData(quick_all_sce) <- meta

saveRDS(quick_all_sce, here("results/corr_sce_all.rds"))
```

- NOTE: I don't like how `quickCorrect` doesn't return the meta data for either the row or column data, and it doesn't carry over assay data. The `correctExperiments` function from the same package seems to do this better, and seems to have the ability to merge in a hierarchical fashion (merge replicates in same genotype and then samples across genotypes). I'm not quite sure how the structure the call to order the replicates in terms of number to use

```{r}
# try correctExperiments
set.seed(01001001)
merged <- correctExperiments(sce, batch = sce$chip)
saveRDS(merged, here("results/corr_sce_all_merged.rds"))
```

- Below is the code from [Chapter 10 of the book](https://bioconductor.org/books/3.13/OSCA.multisample/chimeric-mouse-embryo-10x-genomics.html#chimeric-mouse-embryo-10x-genomics) this pipeline is based on and shows how they use `correctExperiments`. I still don't quite get the order of the values in the merge.order though... The description says they have 3 replicates and 2 batches, and the table seems to denote that sample 5, 7 and 9 (which presumably correspond to 1, 3, 5 in the `merge.order` sublist) as the WT. How would one write the list order for our data if we wanted to merge on multiple groups (sex > age > genotype > batch for example)?

```{r}
#| eval: false
library(MouseGastrulationData)
sce.chimera <- WTChimeraData(samples=5:10)
sce.chimera

library(scater)
rownames(sce.chimera) <- uniquifyFeatureNames(
    rowData(sce.chimera)$ENSEMBL, rowData(sce.chimera)$SYMBOL)

drop <- sce.chimera$celltype.mapped %in% c("stripped", "Doublet")
sce.chimera <- sce.chimera[,!drop]

sce.chimera <- logNormCounts(sce.chimera)

library(scran)
dec.chimera <- modelGeneVar(sce.chimera, block=sce.chimera$sample)
chosen.hvgs <- dec.chimera$bio > 0

library(batchelor)
set.seed(01001001)
merged <- correctExperiments(sce.chimera, 
    batch=sce.chimera$sample, 
    subset.row=chosen.hvgs,
    PARAM=FastMnnParam(
        merge.order=list(
            list(1,3,5), # WT (3 replicates)
            list(2,4,6)  # td-Tomato (3 replicates)
        )
    )
)
# check counts for sample and tomato status
table(colData(sce.chimera)$sample, colData(sce.chimera)$tomato)
```

-   Now run diagnostics on the batch-corrected data to ensure its validity

    -   Check cluster membership

```{r}
#| label: QC-table
all.snn.gr <- buildSNNGraph(quick_all_sce, use.dimred="corrected", k=20)
clusters_all <- igraph::cluster_walktrap(all.snn.gr)$membership
colLabels(quick_all_sce) <- factor(clusters_all)

clusterTab.all <- data.frame(clusters=clusters_all, batch=quick_all_sce$chip, source=quick_all_sce$label)

all.tab <- table(Cluster=clusters_all, Batch=quick_all_sce$chip)
all.tab
```

-   Visualisation of cluster composition

```{r}
#| label: QC-barplot
ClusterInfo.all <- data.frame(Cluster=clusters_all, Batch=quick_all_sce$chip, source=quick_all_sce$label) %>%
  group_by(Cluster,Batch) %>%
  summarise(cells = n())

ggplot(data=ClusterInfo.all, aes(x=Cluster,y=cells, fill=Batch)) +
	theme(axis.text.x=element_text(angle = 90, hjust = 0)) +
	geom_col() +
	theme(legend.text = element_text(size = 7))
```

-   Look at the variance in the log-normalised abundances across batches for each cluster, a high varibility may indicate incomplete correction e.g. same cell type from two chips was not combined into a single cluster.
-   Focus on these clusters to see if this is likely due to the biology/genuine batch-specific populations or if further investigation is required.

```{r}
#| label: QC-abund-var
var <- clusterAbundanceVar(all.tab)

# Also printing the percentage of cells in each cluster in each batch:
percent <- t(t(all.tab)/colSums(all.tab)) * 100 
df <- DataFrame(Batch=unclass(percent), var=var)
df[order(df$var, decreasing=TRUE),]
```

##{-}

## QC Biological Heterogeneity

-   Compare the original clustering of isolated chips to see if the populations have been preserved during correction.
-   If using Multiple Chips integration put this in the console before continuing `mnn_out <- all.snn.gr` and `mnnclusters <- clusters_all`.

### Nested Clustering

-   `nestedClusters()` function helps quantify this, well-nested clusters have a high `max` value indicated most cells were from a single pre-correction cluster.
    -   Show values for 2nd chip using `tab.H2$alt.mapping` etc
    -   No red/orange stripes, distinct blocks indicate that the integration was successful.
    -   Horizontal stripes may indicate multiple pre-correction clusters have been merged. However it could also be due to closely related clusters that were arbitrarily separated within the pre-integration clustering.
    -   If concerned use cell-type specific markers to investigate what you think clusters are likely to be.

```{r}
mnn_out <- quick_all_sce
mnn_clusters <- clusters_all
```

```{r}
get_clusters <- function(sce_object) {
    g <- buildSNNGraph(sce_object, k=10, use.dimred='PCA')
    clust <- igraph::cluster_walktrap(g)$membership
    colLabels(sce_object)  <- factor(clust)
    return(sce_object)
}
# get clusters for each chip separately
chips <- unique(colData(sce)$chip)
separate_clusters <- map(chips, ~ get_clusters(sce[,colData(sce)$chip == .x])) %>%
  set_names(chips)

# check clusters
lapply(separate_clusters, function(x) table(colLabels(x)))
```

- From what I gather, the point of the following chunk is to compare the result of clustering after batch correction with `quickcorrect` and without. For this to work, we need to give the `sce` object colLabels that correspond to the groups they are clustered into batch correction. I've add a chunk above that generates clusters for each chip separately and assigns them to the colLabels as required. 

We can visualise this per-chip clustering with TSNE/UMAP as well.

```{r}
# run TSNE
set.seed(1234)
separate_clusters <- lapply(separate_clusters, runTSNE, dimred="PCA")
# plot TSNE
per_chip_plots <-
  map(chips, ~ plotTSNE(separate_clusters[[.x]], colour_by = "label") + 
                          ggtitle(.x))
# show plots
do.call(gridExtra::grid.arrange, c(per_chip_plots, list(ncol=2)))
```

I also rewrote the code to use a function to generate the heatmaps so it's much less repetitive.

```{r}
#| label: nested-clusters
get_heatmap <-
  function(chip,
           sce_object,
           batch_corrected_sce,
           batch_clusters) {
    # get chip table
    table_chip <-
      nestedClusters(ref = paste("before", colLabels(sce_object[[chip]])),
                     alt = paste("after", batch_clusters[batch_corrected_sce$chip == chip]))
    # get heatmap
    heat_chip <-
      pheatmap(
        table_chip$proportions,
        cluster_row = FALSE,
        cluster_col = FALSE,
        main = paste0(chip, " comparison"),
        silent = TRUE
      )
    return(heat_chip)
  }

heatmaps <-
  map(chips,
      ~ get_heatmap(.x, separate_clusters, mnn_out, mnn_clusters)) %>%
  set_names(chips)

# show plots
gridExtra::grid.arrange(heatmaps$H2[[4]], heatmaps$H3[[4]])
```

### RAND index

-   This helps you judge if you have retained the clusters, by quantifying the "agreement" between clusters before and after integration.
-   To get H2 RAND index type `ri.H2` and so on
-   A value near 1 suggests that the within-chip variance has been maintained.
-   Add additional chips as required.

```{r}
#| label: RAND
apply_pairwise_rand <-
  function(chip,
           sce_object,
           batch_corrected_sce,
           batch_clusters) {
    # apply function
    ri <- pairwiseRand(batch_clusters[batch_corrected_sce$chip == chip],
                   colLabels(sce_object[[chip]]), mode = "index")
    return(ri)
  }

ri_list <-
  map(chips,
      ~ apply_pairwise_rand(.x, separate_clusters, mnn_out, mnn_clusters)) %>%
  set_names(chips)
ri_list
```

-   Breaking down these Adjusted Rand Index calculations allows you to look at per-cluster ratio.

    -   A strip of low ratios suggests the clustering hasn't gone far enough
    -   A diagonal low ratio stripe suggests inflated clustering or introduced artificial heterogeneity.

```{r}
#| label: RAND-plot
get_rand_heatmap <- function(chip,
                             sce_object,
                             batch_corrected_sce,
                             batch_clusters) {
  # get chip table
  table_chip <- pairwiseRand(colLabels(sce_object[[chip]]), 
                             batch_clusters[batch_corrected_sce$chip==chip])
  # get heatmap
  heat_chip <- pheatmap(table_chip, cluster_row=FALSE, cluster_col=FALSE,
    col=rev(viridis::magma(100)), main = paste0(chip, " probabilities"), silent=TRUE)
  return(heat_chip)
}

rand_heatmaps <-
  map(chips,
      ~ get_rand_heatmap(.x, separate_clusters, mnn_out, mnn_clusters)) %>%
  set_names(chips)

gridExtra::grid.arrange(rand_heatmaps$H2[[4]], rand_heatmaps$H3[[4]])
```

### Lost Variance

-   This method is specific for fastMNN corrected data **only**.
-   How much of the within-batch variance ("real" biology) has been lost during `fastMNN()`, ideally \< 10 %.

```{r}
#| label: lost-var
metadata(mnn_out)$merge.info$lost.var
```
