---
title: "Identifying Cluster Marker genes"
---

```{r}
#| label: source packages needed
# load packages needed
source(here::here("scripts/setup.R"))
```

-   Lots of methods to determine unique or identifying genes in clusters, looking for differentialy expressed genes often pairwise comparisons e.g. cluster 1 vs 2, 1 vs 3 etc.

-   You can also do cell-type comparisons if your cell type is known.

-   A [recent comparison](https://www.nature.com/articles/nmeth.4612) of various tests suggests these often perform quite well, including some developed for BulkSeq (e.g. edgeR, DEseq2) if lowly expressed genes removed (lots of 0's in a matrix throws them out).

-   When asking what's the difference between the clusters;

    -   Think about what you are comparing with these tests.
        -   We made these clusters assuming that there a difference in gene expression data.
    -   What is your biological question?
    -   What is your dataset like? Are your cell-types similar?
    -   Think about assessing and validating the results e.g. qPCR/Flow. If the cells are very similar (i.e. not true biological clusters), then marker genes will still be significant but won't be meaningful.

-   There are 3 statistical test types this can use in `findMarkers`:

    ![](findMarker_stats.png)

    -   A t-test (default) would likely select both of these genes as cluster 2 markers, both significantly differ between the clusters and would recognise the log-fold change in gene y as higher.
    -   A wilcoxon rank-sum test would say expression of both genes was higher in cluster 2 and therefore use both as marker genes, but wouldn't note the magnitude of the change.
    -   A binomial test wouldn't necessarily select either as a marker as the gene has been expressed in both clusters, will only select genes that are highly expressed in one cluster.

## Default find markers

-   Clears the environment and load in data from prior processing
-   Default uses Louvain cluster IDs, can amend to add in Leiden if desired.

```{r}
#| label: 2+_chips
# Data from 2 chips, load uncorrected files for later comparisons
#corrected <- readRDS("results/corr_sce_2chip.rds")
#uncorrected <- readRDS("results/ori_sce_2chip.rds")

# Data from 2+ chips
corrected <- readRDS(here("results/Clustered.rds"))
uncorrected <- readRDS(here("results/DimRed.rds"))

# Ensures gene names are unique
rownames(corrected) <- uniquifyFeatureNames(rownames(corrected), rowData(corrected)$Gene_Name)
rownames(uncorrected) <- uniquifyFeatureNames(rownames(uncorrected), rowData(uncorrected)$Gene_Name)

# Puts the cell IDs in the same order then copies cluster assignments to the uncorrected object.
all(colnames(uncorrected) == colnames(corrected))
colData(uncorrected)$louvain <- factor(colData(corrected)$louvain)
colData(uncorrected)$leiden <- factor(colData(corrected)$leiden)
# update tsne and umap names
#reducedDimNames(uncorrected) <- c("PCA", "TSNE", "UPMAP")
```

- NOTE: I assume the `uncorrected` object was here as a placeholder, so I've replaced it with the `corrected` object in the subseqent code

-   A reminder of the cluster assignments on the corrected data

```{r}
#| label: t-SNE-recap
#| fig-keep: last
#| fig-height: 3
#| fig-width: 6
p1 <- plotTSNE(corrected, colour_by = "louvain", text_by = "louvain")
p2 <- plotTSNE(corrected, colour_by = "leiden", text_by = "leiden")

cowplot::plot_grid(p1, p2, labels = c("Louvain", "Leiden"))

rm(p1, p2)
```

-   Use the `findMarkers` function on the **uncorrected** sce object (saved before batch correction).
<!-- -   NOTE: again, I've substituted the `corrected` object -->

    -   Can use Louvain or Leiden clusters as appropriate.
    -   Account for potential batch differences by adding it as a co-variate in the statistical model.
    -   Default statistical test is a t-test

```{r}
#| label: find-markers
# default options do not need to be specified, but shown here for illustration
markers_default <- findMarkers(
  uncorrected, 
  groups = factor(uncorrected$louvain), # clusters to compare
  block = uncorrected$SampleGroup,    # covariates in statistical model
  test.type = "t",   # t-test (default)
  direction = "any", # test for either higher or lower expression (default)
  lfc = 0, # null hypothesis log-fold-change = 0 (default)
  pval.type = "any" # ranking of p-values based on any comparison (default)
)
```

-   Check that markers_default\` is equal to the number of clusters in your data.

-   Use `markers_default[[x]]` to look at a particular cluster.

-   For example the top ranked genes for cluster 1 are:

```{r}
#| label: markers-default
c1_markers_default <- markers_default[[1]]
rownames(c1_markers_default)[c1_markers_default$Top <=3]

rm(markers_default, c1_markers_default)
```

-   Can look at clustering across batches with MNN-corrected values and feature gene expression on corrected values across clusters (defaults P2ry12, Tmem119 and Glast1).

```{r}
#| label: plot-markers-default
#| fig-keep: last
#| fig-width: 9
#| fig-height: 4
# For 2+-chip analysis use "corrected"/"reconstructed" rather than "uncorrected"/"logcounts" or "tpm" 
p1 <- plotTSNE(corrected, 
         colour_by = "P2ry12", 
         by_exprs_values = "logcounts")

p2 <- plotExpression(corrected, 
               features = c("P2ry12", "Tmem119", "Slc1a3"),
               colour_by = "Sample",
               x = "louvain")

cowplot::plot_grid(p1, p2, rel_widths = c(1,1.5))

rm(p1, p2)
```

## Up-regulated marker genes

-   Re-run the `findMarkers` function so it will identify genes that are significantly up-regulated in one cluster compared to any other cluster with a log-fold change of \>1.
    -   Output is of "top" cluster markers ranked by p-value.
    -   The heatmaps display the log FC differences relative to the other clusters e.g. P2ry12 is \~7 LFC higher in cluster 4 compared to cluster 1.
        -   Adjust code to *n= x* clusters

```{r}
#| label: markers-cutoff
#| fig-keep: last
markers_up_lfc1 <- findMarkers(corrected,
                          groups = factor(corrected$louvain),
                          block = corrected$Sample,
                          test.type = "t",
                          direction = "up",
                          lfc = 1,
                          pval.type = "any") # "any" DE compared to any other clusters

top10_clusters <- map(markers_up_lfc1, ~ .x[.x$Top <= 10, ])

heatmaps <-
  map2(
    top10_clusters,
    names(top10_clusters),
    ~ pheatmap(
      .x[, 5:7],
      cluster_cols = FALSE,
      cluster_rows = FALSE,
      fontsize_row = 5,
      main = paste0("Cluster ", .y, " vs Others")
    ) %>% .[[4]]
  )

cowplot::plot_grid(plotlist = heatmaps[1:4], ncol = 2)

rm(markers_up_lfc1, heatmaps)
```

-   These heatmaps show `Logcount` gene expression values of the top 10 ranked marker genes
    -   Adjust code to *n= x* clusters

```{r}
#| label: heatmap-markers-cutoff

# heatmap of gene expression values for each cluster
heatmaps <- map2(top10_clusters, names(top10_clusters), ~ plotHeatmap(corrected, features = rownames(.x),
                                              order_columns_by = c("louvain", "Sample"),
                                              main = paste0("Cluster ", .y, " vs Others")))

rm(top10_clusters)
```

## Unique DE marker genes (cell-type identifiers)

-   Can change `pval.type` to by all which means it would need to be DE in one cluster compared to all the others, most suited for identifying cell-type marker genes.
-   There may not be a unique up-regulated marker gene for sub-clusters of the same cell type so looking at both down and up regulated genes.
-   If using "all" then this "Top" column won't be present, so an FDR cut-off filter by use `[markers_up_lfc1$`cluster1`$FDR < 0.05,]` is applied instead.
    -   Adjust code to *n= x* clusters

```{r}
#| label: uni-markers-cutoff
markers_up_lfc1 <- findMarkers(corrected,
                          groups = factor(corrected$louvain),
                          block = corrected$Sample,
                          test.type = "t",
                          direction = "any",
                          lfc = 1,
                          pval.type = "all") # "all" has to be DE compared to all other clusters

fdr_subset <- map(markers_up_lfc1, ~ .x[.x$FDR < 0.01, ])
```

- NOTE: for whatever reason, the FDR for several of the clusters is very high (exactly 1 for most it seems). I'll filter to any clusters that have any rows with low enough FDRs

```{r}
# check number of rows left after filter
map_dbl(fdr_subset, nrow)
# subset to cluster that sill have any rows
fdr_subset <- fdr_subset[map_lgl(fdr_subset, ~nrow(.x) != 0)]
```


```{r}
#| eval: true
# make heatmaps
fdr_heatmaps <- map2(
  fdr_subset,
  names(fdr_subset),
  ~ plotHeatmap(
    corrected,
    features = rownames(.x),
    order_columns_by = c("louvain", "Sample"),
    main = paste0("Cluster ", .y, " vs Others")
  )
)
```

```{r}
rm(markers_up_lfc1, fdr_subset)
```

## Markers from multiple tests

-   As the statistical tests determine DEG expression in different ways you can also run all 3 tests and look at the "overall" ranked P-values (as well as individual test rankings).
-   As this data is from one cell type the binomial statistical test is inappropriate and therefore excluded
    -   Adjust code to *n= x* clusters

```{r}
#| label: multi-test_markers
#| results: asis
markers_combined <- multiMarkerStats(
  t = findMarkers(
    corrected,
    groups = corrected$louvain,
    direction = "any",
    block = corrected$Sample
  ),
  wilcox = findMarkers(
    corrected,
    groups = corrected$louvain,
    test = "wilcox",
    direction = "any",
    block = corrected$Sample
  )#,
 # binom = findMarkers(
   # corrected,
   # groups = corrected$louvain,
   # test = "binom",
   # direction = "any",
   # block = corrected$SampleGroup
  #)
)

sum_table <-
  map2(markers_combined,
       1:length(markers_combined),
       # filter to top 10
       ~ .x[.x$Top <= 10,] %>%
         # add cluster column
         as.data.frame() %>%
         dplyr::mutate(Cluster = .y)) %>%
  list_rbind()

kbl(sum_table[,c(12,1:5,10)], digits = 55) %>% 
  kable_styling(bootstrap_options = "striped", fixed_thead = T) %>% 
  column_spec(3:8, color = spec_color(sum_table$Cluster, end = 0.9)) %>% 
  column_spec(1:2, color = "White", background =   spec_color(sum_table$Cluster, end = 0.9)) %>% 
  add_header_above(c(" " = 2, "Combined Test Statitics" = 3, "Individual Test Info" = 3))

rm(markers_combined)
```

##{-}

-   This final table will be saved in the Results folder

```{r csv_FM}
write.csv(sum_table, here("results/LouvainFeatureMarkersMultiTest.csv"))
rm(list = ls())
```
