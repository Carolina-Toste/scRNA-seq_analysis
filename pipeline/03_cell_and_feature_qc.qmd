---
title: "Cell and Feature QC"
---

```{r}
#| label: source packages needed
# load packages needed
source(here::here("scripts/setup.R"))
```

## Loading Data into R

```{r}
# make function to read in cogent outputs
read_cogent <-
  function(path_to_output = "../../../CogentAP 2.0 analysis results of Syk Chip Nov 22",
           file_pattern = "*genematrix.csv",
           filter_string = "/extras/",
           exclude_folders = NULL) {
    # get list of files
    files <- list.files(
      path = path_to_output,
      pattern = file_pattern,
      full.names = TRUE,
      recursive = TRUE
    ) %>%
      # exclude files in "extras" dir
      .[!str_detect(., filter_string)]
    
    # if there are folders to exclude, then filter them out
    if (!is.null(exclude_folders)) {
      files <- files[!grepl(paste0(exclude_folders, collapse = "|"), files)]
    }
    
    file_names <- str_split(files, "/") %>% 
      # get last element of each list element
      sapply(tail, 1) 
    # read in files
    files <- map(files, ~ read_csv(.x, show_col_types = FALSE)) %>%
      set_names(file_names)
    
    # check row number
    row_num <- map_dbl(files, nrow)
    if(sum(row_num == 0)) {
      print("FILE WITH NO ROWS!")
    }
    
    # concatenate files
    #files <- do.call(rbind, files)
    
    return(files)
  }
```

For whatever reason, the current version of cogent (2.0) has produced a directory for each sample (or is it per chip?), but instead of each file only containing data for that sample, each file contains all barcodes, but the values are just 0 for other samples.

This results in conflicts if you try to merge the files as they are, so they need to be filtered to the respective sample data first.

For now, it seems best to first read in the stats files and filter out rows where all numeric columns are 0. 
This should leave only data from that sample, including the relevant barcodes.
These barcodes can then be used to select the relevant columns from the genematrix files (these can't just be filtered to all rows being 0, especially for the negative controls).

## Cogent path

Make sure this code had the correct path to your cogent output.
The directory should have subdirectories for all your batches.

```{r}
# put path to cogent output directory here
cogent_output_directory <- here::here("../../../Analysis files/output/analyze")
# show what the directory for this project looks like
list.files(cogent_output_directory)
# show a subdirectory
list.files(paste0(cogent_output_directory, "/H2"))
```

## Process cogent 2.0 output

It takes a few seconds to read in all the gene matrix files, so I'll save the merged data and set `eval: false` to avoid re-running this chunk.
Note that this means you'll need to manually rerun this chunk if the input data changes.

```{r}
#| label: cogent 2.0 data
#| eval: false

# Get sample info in stats files
stats <- read_cogent(path_to_output = cogent_output_directory, 
                     file_pattern = "*_stats.csv",
                     exclude_folders = "H1_2") %>%
  # filter out rows where all numeric columns are 0
  map(~ dplyr::filter(.x, !if_all(where(is.numeric), ~ .x == 0)))

# Get comments from well list file and add row to stats
# list the files
files <- list.files(here("data/well_list_data"))
# exclude if needed - note you can add whatever you like to exclude within the
# paste0 call
well_list_files <- files[!grepl(paste0(c("H1L2"), collapse = "|"), files)] 
# read in data
well_list_files <- well_list_files %>%
  map(~read.delim(here(paste0("data/well_list_files/", .x)), header = TRUE, 
                  row.names = NULL) %>%
        # remove "+" from barcode column and add as rownames
        dplyr::mutate(barcode_fixed = gsub("\\+", "", Barcode)))

# need to filter based on barcode and add the two columns
stats <- map2(stats, well_list_files, ~ .y %>%
       # select columns to join from will list file
       dplyr::select(barcode_fixed, Comment, State) %>%
       # left join into stats
       dplyr::left_join(.x, ., by = join_by(Barcode == barcode_fixed)))

# add column with names of source folder to sample info
stats <- map2(stats, names(stats), ~ .x %>%
                # split the source file string on "_" and get the first chunk
       dplyr::mutate(source_folder = str_split(.y, "_") %>%
                       sapply(head, 1)))

# read in gene matrix data
gene_matrix <- read_cogent(path_to_output = cogent_output_directory,
                           exclude_folders = "H1_2") %>%
  # select barcodes from the respective stats files
  map2(stats, ~ dplyr::select(.x, GeneID, contains(.y$Barcode))) %>%
  # full join all files
  purrr::reduce(full_join, by = "GeneID")

gene_info <- read_cogent(path_to_output = cogent_output_directory,
                         file_pattern = "gene_info.csv",
                         exclude_folders = "H1_2") %>%
  # merge gene info files
  do.call(rbind, .) %>%
  # remove duplicates
  unique()

# merge stats files
stats <- list_rbind(stats)

# save objects as this can take a few seconds to run
write_csv(stats, here("data/2023-02-28_cogent2_stats.csv"))
write_csv(gene_matrix, here("data/2023-02-28_cogent2_gene-matrix.csv"))
write_csv(gene_info, here("data/2023-02-28_cogent2_gene-info.csv"))
```

Now we can read in the processed cogent data

```{r}
# clear env
rm(list = ls())
# read in saved data
stats <- read_csv(here("data/2023-02-28_cogent2_stats.csv"))
gene_matrix <- read_csv(here("data/2023-02-28_cogent2_gene-matrix.csv"))
gene_info <- read_csv(here("data/2023-02-28_cogent2_gene-info.csv"))
```

```{r}
#| label: data-prep

#add columns for Genotype, Sex and Age as well as chip name
stats <- stats %>% mutate(Genotype = case_when(
  startsWith(Sample, "APP") ~ "APP",
  startsWith(Sample, "Abi3_KO_APP") ~ "Abi3KOAPP",
  startsWith(Sample, "Abi3_212F_APP") ~ "Abi3212FAPP",
  startsWith(Sample, "APP_mix") ~ "APPmix",
  startsWith(Sample, "Abi3_212F_APP_mix") ~ "Abi3212FAPPmix",
))

# update this string to be more precise
stats <- stats %>% mutate(Sex = case_when(
  grepl("_M_", Sample) ~ "M",
  grepl("_F_", Sample) ~ "F",
))


stats <- stats %>% mutate(Age = case_when(
  endsWith(Sample, "_8wk") ~ "8wk",
  endsWith(Sample, "_6mo") ~ "6mo",
))

# set chip to be the source folder
stats$chip <- stats$source_folder
```

Now we compute total read by summing all the numeric columns in `stats`, and then compute a percentage of total reads for each.

- NOTE: The code for getting total reads currently includes the `No_of_Genes` column - is this supposed to be included?

```{r}
# get numeric column names
cols_to_compute <- dplyr::select(stats, where(is.numeric)) %>% names()
# note that one could change the code to select based on string if that would be
# more reliable. This seems to be the case here so I'll use that for now
cols_to_compute <- dplyr::select(stats, contains("_Reads")) %>% names()

# get read totals for each row by summing the numeric columns
# Note that this includes the "No_of_Genes" column
stats <- stats %>%
  dplyr::mutate(Total_Reads = rowSums(across(where(is.numeric))))

# calculate and add percentage of each read type
compute_percent <- function(df, column, read_col = "Total_Reads") {
  # compute percent
  df <- data.frame((df[column] / df[read_col]) * 100)
  # new column name
  col <- paste0("percentage_", column)
  names(df) <- col
  return(df)
}

# compute columns and cbind them 
stats <- map(cols_to_compute, ~ compute_percent(stats, .x)) %>%
  list_cbind() %>%
  # bind this new df to the og one
  cbind(stats, .)

rm(cols_to_compute)
```

```{r}
# Identify controls and samples
stats$sample_type <- str_detect(string = stats$Sample, pattern = "Ctrl")
stats$sample_type <- ifelse(stats$sample_type, "Control", "Sample")

# Identify and remove undetected, short or undetermined reads
# if there are any undetected, short of undetermined reads, filter them
if (sum("Non_sample" %in% stats$Sample)) {
  ## check how many there are
  print(paste0(
    "There are ",
    sum(grepl("Non_sample", stats$Sample)),
    " non-sample reads"
  ))
  stats <- stats %>%
    dplyr::filter(Sample != "Non_sample")
}
```

-   Mito perc should never be NA but each stats file seem to contain rows comprising all 0s (cells with no reads should be removed during demux). Need investigating. As a temp solution, one can just filter the rows in `stats`

- NOTE: I don't seem to have any NA mito percent

```{r}
sum(is.na(stats$percentage_Mitochondrial_Reads))
# check stats rows
stats <- stats %>%
  dplyr::filter(!if_all(where(is.numeric), ~ .x == 0))

# convert to matrix
gene_matrix <- gene_matrix %>%
  column_to_rownames("GeneID") %>%
  as.matrix() 

# if there are any columns that are all 0, remove them
if (length(which(colSums(gene_matrix) == 0)) > 0) {
  gene_matrix <- gene_matrix[,-(which(colSums(gene_matrix)==0))]
}
```

## SCE Object Annotation

-   Numbers of cells sequenced for each sample based on your experimental conditions

```{r}
#| label: sample-summary-graph
#| fig-height: 4
#| fig-width: 6
ggplot(data = stats, mapping = aes(x = Sample, fill = Sample)) + geom_bar() +
  geom_text(aes(label = ..count..), stat = "count", vjust = 1.5, colour = "black", size  = 3) +
  scale_fill_aaas(alpha = .7) + ylab(label = "Frequency") +
  theme(legend.position = "none", axis.text.x = element_text(angle = 315, hjust = 0))
```

-   Create the SingleCellExperiment Object, s4 data class [here for more info](http://bioconductor.org/books/3.15/OSCA.intro/the-singlecellexperiment-class.html)

    -   Output will be a summary of the sce object dimensions (row x column), which equates to genes measured x sample \# (as a sanity check)

```{r}
#| label: make-sce
# check stats rows
sce_all <- SingleCellExperiment(assays = list(counts = gene_matrix), colData = stats, rowData = gene_info) 
dim(sce_all)

saveRDS(sce_all, here("results/SCE_all.rds"))
rm(gene_info, gene_matrix, stats)
```

-   Evaluate the number of genes detected in controls (called features in seq analysis)

    -   Negative controls should have low numbers of genes detected, provides an estimate of background "noise".
    -   Positive controls should have a mid-high number of genes detected, as K-562 cells are human lymphoblasts there will be fewer cells "detected" if aligned to the mouse genome, though some will be conserved between species.
    -   If the controls aren't correct this suggests a technical issue with the library/sequencing.

```{r}
#| label: AllGeneDistr
#| echo: false
#| fig-width: 12
#| fig-height: 6

plotColData(sce_all, x="Sample", y="Gene_Reads", colour_by = "Sample")+
  facet_grid(~ colData(sce_all)$sample_type, scales = "free_x", space = "free_x")+
  scale_y_log10()+
  theme(axis.text.x = element_text(angle=90))+
  ggtitle("Gene Reads")
```

-   Restrict the genes to protein coding genes only (optional but recommended)

```{r}
#| label: make-pc
sce <- sce_all[rowData(sce_all)$Gene_Biotype == "protein_coding",]
dim(sce)
```

-   Remove the data form the control samples

```{r}
#| label: fil-sample
sce <- sce[,colData(sce)$sample_type == "Sample"]
```

-   Remove undetected genes (i.e. row count is 0) outputs the % of detected genes

```{r}
#| label: detected-genes
detected_genes <- rowSums(counts(sce)) > 0
sce <- sce[detected_genes,]
```

-   `r (sum(detected_genes) / length(detected_genes))*100` % of genes are detected

-   If needed you can also filter our sparsely expressed genes e.g. low levels detected in a small number of cells.

    -   Uses the `addPerFeatureQC` function
    -   Based on % of cells across the dataset in which gene has been detected
    -   The maximum sparsity is based on 20 cells, in this case `r 1 - (20/ ncol(sce))`

```{r}
#| eval: true
#| label: rm-sparse-gene
sce <- addPerFeatureQC(sce)
rowData(sce)$gene_sparsity <- (100 - rowData(sce)$detected) / 100
max.sparsity <- 1 - (20/ ncol(sce))
sparse.genes <- rowData(sce)$gene_sparsity > max.sparsity
sce <- sce[!sparse.genes,]
sum(sparse.genes)
rm (max.sparsity, detected_genes)
```

```{r}
#| eval: false
saveRDS(sce, here("temp.rds"))
```

```{r}
#| eval: false
sce <- readRDS(here("temp.rds"))
```

-   Identify Mitochondrial and ribosomal genes, most specific way to do this is to add the Chromosome information from Ensemble database.

    -   Selected [GRCm39v107](https://www.ncbi.nlm.nih.gov/grc/mouse) (-\> [5])- to amend for future versions use `query(ah, c("mus musculus", "EnsDb", 39))` and select the corresponding version number
    -   **You will need to change the taxonomy for a human datasest**

```{r}
#| label: annotate-genes 
ah <- AnnotationHub()
#annotation hub caches the ensembl database on the machine, this is where you will need to alter the species and version.
ens.grcm39 <- query(ah, c("mus musculus", "EnsDb", 39))[[5]] 

#Get the Chromosome number (SEQNAME) from the Ensembl database, and the Ensemble_ID which will be used to merge the two datasets.
genes <- rowData(sce)$Ensembl_ID
gene_annot <- AnnotationDbi::select(ens.grcm39, 
                                    keys = genes,
                                    keytype = "GENEID",
                                    columns = c("GENEID", "SEQNAME")) %>%
    set_names(c("Ensembl_ID", "Chromosome"))
rowData(sce) <- merge(rowData(sce), gene_annot, by = "Ensembl_ID", sort=FALSE)
rownames(rowData(sce)) <- rowData(sce)$Ensembl_ID

#List the mitochondrial genes
is.mito <- which(rowData(sce)$Chromosome=="MT" | rowData(sce)$Chromosome=="gMT")
#is.mito <- which(rowData(sce)$Chromosome=="gMT")
unique(rowData(sce)$Chromosome)

#Confirms mito gene number
length(is.mito)

#Add QC metrics to cells, including annotating mito genes
sce <- addPerCellQC(sce, subsets=list(Mito=is.mito))

rm(ah, ens.grcm39, genes, gene_annot, is.mito)
```

-   Easiest way to do this (default), and also select ribosomal genes is to select genes with "mt", "Rpl or"Rps" in the name, the case is species dependent.

- NOTE: I'm getting NAs from the mito and ribo genes, not sure why

```{r}
#| label: check NA genes

rowData(sce) %>% 
  as_tibble() %>% 
  dplyr::filter(is.na(Gene_Name)) %>%
  gt::gt()
```

```{r}
#| label: annotate-genes-opt2
#^ indicates "starts with", these gene name patterns will differ in a human dataset 
mito_genes <- str_detect(string = rowData(sce)$Gene_Name, pattern = "^mt-")
ribo_genes <- str_detect(string = rowData(sce)$Gene_Name, pattern = "^Rpl|^Rps")

# for now I'll just assume they aren't mito or ribo genes I guess
mito_genes[is.na(mito_genes)] <- FALSE
ribo_genes[is.na(ribo_genes)] <- FALSE
#Confirm numbers
sum(mito_genes)
sum(ribo_genes)

# Calculate QC for cells
sce <- addPerCellQC(sce, subsets = list(mito = mito_genes,ribo = ribo_genes))

rm(mito_genes, ribo_genes)
```

## Identification of low-quality cells

-   Evaluate the number of genes detected (called features in seq analysis)
    -   Negative controls should have low numbers of genes detected, provides an estimate of background "noise".
    -   Positive controls should have a mid-high number of genes detected, as K-562 cells are human lymphoblasts there will be fewer cells "detected" if aligned to the mouse genome, though some will be conserved between species.
    -   If the controls aren't correct this suggests a technical issue with the library/sequencing.

```{r}
#| label: geneDistr
#| echo: false
#| fig-width: 12
#| fig-height: 6
plotColData(sce, x="Sample", y="detected", colour_by = "Sample")+
  scale_y_log10()+
  theme(axis.text.x = element_text(angle=90))+
  ggtitle("Detected Features")
```

-   High numbers of mitochondrial or ribosomal reads indicate cells were dying at time of fixation
    -   Cells with higher than \~5-10% mitochondrial would be considered for exclusion, though this is dependent on **your** dataset
    -   Only high mito percentage used as a threshold in subsequent steps.

```{r}
#| label: mtDistr
#| echo: false
#| fig-width: 12
#| fig-height: 6
plotColData(sce, x="Sample", y="subsets_mito_percent", colour_by = "Sample")+
  theme(axis.text.x = element_text(angle=90))+
  ggtitle("Mito Percent")

plotColData(sce, x="Sample", y="subsets_ribo_percent", colour_by = "Sample")+
  theme(axis.text.x = element_text(angle=90))+
  ggtitle("Ribo Percent")
```

-   Percentage of exon reads against the number of genes detected.

```{r}
#| label: perc-exon
#| echo: false
#| fig-width: 12
#| fig-height: 6
plotColData(sce, x = "detected", y = "percentage_Exon_Reads", colour_by = "Sample") +
  theme(legend.position = "top",
        legend.direction = "horizontal",
        axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0)) +
  guides(colour = guide_legend(override.aes = list(size = 4)))
```

-   Library complexity shows the relative proportion of the library size accounted for by the most highly expressed genes per cell.
-   If a small number of highly expressed genes make up most of the library this is an indicator of low quality data, for an example look at the negative control.

```{r}
#| label: lib-complexity
#| message: false
#| warning: false
#| fig-width: 6
#| fig-height: 6

plotScater(sce_all, block1 = "sample_type", colour_by = "Sample",
           nfeatures = 50, exprs_values = "counts", ncol = 3, line_width = .5) 

plotScater(sce, block1 = "sample_type", colour_by = "Sample",
           nfeatures = 50, exprs_values = "counts", ncol = 3, line_width = .5) 

rm(sce_all)
```

## Filtering of low-quality cells

-   This step is more critical in other sc-seq types, e.g. droplet.
-   Using the Scater function `quickPerCellQC` function, you can apply adaptive low library, low feature and high % mitochondrial thresholds to the entire dataset or on a per sample basis.
    -   This uses the `isOutlier` function states (scran package) where anything outside of 3x median-absolute-deviations is marked as an outlier.
    -   Per sample basis is recommended if your samples have a strong biological reason e.g. from different experiment days or different fixatives (if not required delete `batch=sce$sample`).
    -   If you have bimodal data then this adaptive filtering would not be suitable.

```{r cell_qc}
cell_qc_results <- quickPerCellQC(colData(sce),
                                  percent_subsets=c("subsets_mito_percent"),
                                  batch=sce$Sample)

as.data.frame(cell_qc_results) %>% 
  summarise(across(everything(), \(x) sum(x, na.rm = TRUE)))
# subsets_mito_percent has missing values - probably shouldn't - need to check
as.data.frame(cell_qc_results) %>% summarise(across(everything(), \(x) sum(x)))

sce$low_lib_size <- cell_qc_results$low_lib_size
sce$low_n_features <- cell_qc_results$low_n_features
sce$high_mito_percent <- cell_qc_results$high_subsets_mito_percent
sce$discard <- cell_qc_results$discard

rm(cell_qc_results)
```

-   Cells that are considered to be outliers in orange, do the thresholds look sensible?

    -   You can also mark cells you suspect are outliers and remove them from analysis later e.g. in clustering.

```{r}
#| label: filtlib
#| fig-width: 12
#| fig-height: 4
plotColData(sce, 
            x="Sample", 
            y="sum",
            colour_by = "low_lib_size") + 
    facet_grid(~ colData(sce)$sample_type, scales = "free_x", space = "free_x") + 
    scale_y_log10() + 
    labs(y = "Total count", title = "Total count") +
    theme(axis.text.x = element_text(angle=90))+
    guides(colour=guide_legend(title="Discarded"))

plotColData(sce, 
            x="Sample", 
            y="sum",
            colour_by = "Comment") + 
    facet_grid(~ colData(sce)$sample_type, scales = "free_x", space = "free_x") + 
    scale_y_log10() + 
    labs(y = "Total count", title = "Comments") +
    theme(axis.text.x = element_text(angle=90))+
    guides(colour=guide_legend(title="Comments"))
```

```{r}
#| label: filtGene
#| fig-width: 12
#| fig-height: 4
plotColData(sce, 
            x="Sample", 
            y="detected",
            colour_by = "low_n_features") + 
     facet_grid(~ colData(sce)$sample_type, scales = "free_x", space = "free_x") + 
    scale_y_log10() + 
    labs(y = "Genes detected", title = "Genes detected") +
    theme(axis.text.x = element_text(angle=90))+
    guides(colour=guide_legend(title="Discarded"))

plotColData(sce, 
            x="Sample", 
            y="detected",
            colour_by = "Comment") + 
     facet_grid(~ colData(sce)$sample_type, scales = "free_x", space = "free_x") + 
    scale_y_log10() + 
    labs(y = "Genes detected", title = "Comments") +
    theme(axis.text.x = element_text(angle=90))+
    guides(colour=guide_legend(title="Comments"))
```

```{r}
#| label: filtMT
#| fig-width: 12
#| fig-height: 4
plotColData(sce, 
        x="Sample", 
        y="subsets_mito_percent",
        colour_by = "high_mito_percent") + 
     facet_grid(~ colData(sce)$sample_type, scales = "free_x", space = "free_x") + 
    labs(y = "Percentage mitochondrial",
         title = "Mitochondrial") +
    theme(axis.text.x = element_text(angle=90))+
    guides(colour=guide_legend(title="Discarded"))

plotColData(sce, 
        x="Sample", 
        y="subsets_mito_percent",
        colour_by = "Comment") + 
     facet_grid(~ colData(sce)$sample_type, scales = "free_x", space = "free_x") + 
    labs(y = "Percentage mitochondrial",
         title = "Comments") +
    theme(axis.text.x = element_text(angle=90))+
    guides(colour=guide_legend(title="Comments"))
```

-   Remove the outliers from the dataset and re-calculate the cell QC metrics based on remainder.

    -   You can edit which columns are removed if required.
    -   To see the column names run `names(colData(sce))`.
    -   The filtered file will then be saved.

```{r}
#| label: rm-outliers
sce <- sce[,!sce$discard]

#Remove the old QC metrics
colData(sce) <-
  colData(sce)[,!colnames(colData(sce)) %in% c("low_lib_size",
                                               "low_n_features",
                                               "high_mito_percent",
                                               "discard")]

#Rerun cellQC
sce<- addPerCellQC(sce)
```

-   If you feel discrete cut-offs are more appropriate for your data exchange the first line of code in the chunk for this.

```{r}
#| label: filt-discrete
#| eval: false
# These are example values, this should be based on __your__ data
sce <- subset(sce, subset = sce$sum > 200 & sce$detected < 20000 &  sce$subsets_mito_percent < 10)
```

-   Save filtered sce as an RDS (can be re-loaded later)

```{r}
#| label: RDS-genefil
saveRDS(sce, here("results/filtered_genes.rds"))
```

