---
title: "Clustering"
---

```{r}
#| label: source packages needed
# load packages needed
source(here::here("scripts/setup.R"))
```

-   Unsupervised clustering will help identify groups of cells based on the transcriptomes.
-   Details about the [methods](https://www.singlecellcourse.org/biological-analysis.html#clustering-introduction).
-   Unlike Hierarchical or k-means clustering, graph-based clustering was **developed for scSeq data**, as it's fast and memory efficient even on large datasets and doesn't rely on a pre-specified cluster number.
-   It uses a nearest-neighbour graph with cells as nodes to detect communities (i.e. highly interconnected nodes). Considered linked by k-NN and shared-NN.
    -   Assess accuracy of the communities/clusters using the modularity metric, overall a value close to 1 is ideal.
    -   When building the network you will need to consider the number of appropriate nearest neighbours.

## Graph-based clustering

-   Walktrap method (not shown)
    -   Short random walks through the network which tend to be "trapped" in highly connected regions.
    -   Repeated walks produce a dendrogram of distances which is then clustered hierarchically.
-   Louvain method and Leiden method (see below).

### Build an SNN graph (universal)

-   Clears the environment and load in data from 1 chip, 2 chips or 2+ chips as one sce object (default is 2+ chips).
-   If you would prefer to run UMAP plots change `runTSNE` to be `runUMAP`.

- NOTE: I've subbed the `use.dirmed = "PCA"` for `= "corrected"` from the batch correction. I'd assume this is the correct thing to do...

```{r}
#| label: clustering-load
set.seed(123)
# Data from quickCorrected chips
# sce <- readRDS(here("results/corr_sce_all.rds"))
sce <- readRDS(here("results/corr_sce_all_merged.rds"))
sce$Sample <- factor(sce$Sample)
# run TSNE
sce <- runTSNE(sce, dimred = "PCA")
snn.gr <- buildSNNGraph(sce, use.dimred = "corrected")
```

### Louvain Clustering

-   Nodes are assigned their own community, works bottom-up (agglomerative method) to re-assign nodes to the community for which they increase the modularity the most (i.e. improves clustering most).
-   Repeated iteratively until modularity/clustering cannot be further improved.
-   Run on the SNN graph, outputs are the cluster number and cells belonging to each cluster and a t-SNE visual summary.

```{r}
#| label: Louvain
# Perform the clustering on the SNN graph
ig.louvain <- igraph::cluster_louvain(snn.gr)

# Extract clusters and store membership in the sce
cl <- ig.louvain$membership
head(cl)
cl <- factor(cl)
sce$louvain <- cl

# number and size of clusters
table(sce$louvain)

# t-SNE plot
plotTSNE(sce, colour_by="louvain") 

rm(ig.louvain, cl)
```

-   Assess the quality by looking at per-cluster modularity on a heatmap, a high diagonal score and low values elsewhere suggest clear separation.
    -   Clusterwise modularity is computed with `clusterModularity` which is proportional to the cluster size so convert to a ratio of observed vs expected for each pair.

```{r}
#| label: QC-Louvain
# Compute cluster-wise modularities
mod.out <- bluster::pairwiseModularity(snn.gr,
                                       #wt.clusters,
                                       sce$louvain,
                                       get.weights=TRUE)

# Ratio of the observed to expected weights
ratio <- mod.out$observed/mod.out$expected
lratio <- log10(ratio + 1) # on log scale to improve colour range

# Plot heatmap
pheatmap(lratio, cluster_rows=FALSE, cluster_cols=FALSE, 
    col=rev(viridis::magma(100)), main="Louvain Clustering Modularity")

rm(mod.out, ratio, lratio)
```

### Leiden Clustering

-   [Methods paper](https://www.nature.com/articles/s41598-019-41695-z):
-   Improves on Louvain as it adds a refinement step which checks at each iteration that clusters are connected and well separated, to prevent it from grouping disconnected sub-clusters together.
-   For the most part igraph `cluster_leiden` function will suffice.

```{r}
#| label: r-Leiden
# Leiden clustering and store IDs
partition <- igraph::cluster_leiden(snn.gr)

#Extract clusters and store membership in the sce
cl <- partition$membership
head(cl)
cl <- factor(cl)
sce$leiden <- cl

# number and size of clusters
# table(sce$leiden)

# t-SNE plot
plotTSNE(sce, colour_by="leiden", text_by="leiden") 

rm(partition, cl)
```

-   To get the [full functionality](https://github.com/vtraag/leidenalg) you will need to use `reticulate` package and create a virtual conda environment before running this analysis.

- NOTE: I've left this code here, but I haven't tried to run it manually at all

```{r}
#| label: conda-Leiden
#| eval: false
#| warning: false
#| message: false
BiocManager::install("reticulate")
library(reticulate)
reticulate::install_miniconda() 

# Then create a python (v3.8) environment and install the required packages (using the following code, one line at a time as you have to type "y" to proceed) in the Anaconda prompt that will be in your recently added section of the start menu. 
# To run this on a laptop you will need to install Visual Studio and NSight compute modules so it can run via the graphics processor.


conda create -n NA
conda activate NA
conda config --env --add channels conda-forge
conda install -c conda-forge numpy
conda install -c conda-forge pandas
conda install -c conda-forge r-reticulate
conda install -c conda-forge umap-learn
conda install -c conda-forge python-igraph
conda install -c conda-forge/label/cf202003 leidenalg
conda deactivate

# Restart your R session (ctrl+shift+F10)
# Run Leiden clustering, output will be the number and size of clusters.
library(reticulate)
reticulate::use_condaenv("C:/Users/medrej/AppData/Local/r-miniconda/envs/r-reticulate")
#reticulate::conda_install("r-reticulate", "leidenalg")
library(leiden)# n to install dependencies, should be installed.
# Lists all installed packages and python configuration
# py_list_packages()
# py_config
# Check required python modules are installed (returns TRUE)
py_module_available("leidenalg")

adjacency_matrix <- igraph::as_adjacency_matrix(snn.gr)

# Leiden clustering and store IDs
partition <- leiden(adjacency_matrix)
sce$leiden <- factor(partition)

# number and size of clusters
table(sce$leiden)
```

### Comparing Clustering

-   To compare the Louvain and Leiden clustering methods in your dataset, they should be similar.

```{r}
#| label: QC-clusters
# Create table and add labels
tmpTab <- table(sce$louvain, sce$leiden)
rownames(tmpTab) = paste("louvain", rownames(tmpTab), sep = "_")
colnames(tmpTab) = paste("leiden", colnames(tmpTab) , sep = "_")

# Create heatmap
pheatmap(tmpTab, cluster_rows=FALSE, cluster_cols=FALSE, 
    col=rev(viridis::magma(100)), main="Louvain vs Leiden Clustering")

rm(tmpTab)
```

###{-}

```{r}
#| label: RDS-clustering
saveRDS(sce, here("results/Clustered.rds"))
rm(list = ls())
```
